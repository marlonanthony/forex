{"version":3,"sources":["graphql/queries/me.js","graphql/queries/currencyPairInfo.js","components/pairs/SelectList.js","graphql/mutations/openPosition.js","graphql/queries/getPairs.js","components/positions/OpenLongPosition.js","components/positions/OpenShortPosition.js","pages/Landing.js","graphql/mutations/logout.js","components/auth/Logout.js","components/navbar/Navbar.js","graphql/mutations/register.js","components/auth/Register.js","graphql/mutations/login.js","components/auth/Login.js","graphql/mutations/addFunds.js","components/pairs/AddFunds.js","components/pairs/Pairs.js","components/pairs/NewPosition.js","pages/Account.js","graphql/mutations/closePosition.js","components/positions/ClosePosition.js","components/pairs/PairDetails.js","pages/Pair.js","graphql/queries/monthlyTimeSeries.js","pages/Chart.js","App.js","index.js"],"names":["MEQUERY","gql","_templateObject","CURRENCY_PAIR_INFO","currencyPairInfo_templateObject","SelectList","_ref","fc","setFc","tc","setTc","react_default","a","createElement","value","concat","onChange","e","_e$target$value$split","target","split","_e$target$value$split2","Object","slicedToArray","fromCurrency","toCurrency","OPENPOSITION","openPosition_templateObject","GETPAIRS","getPairs_templateObject","OpenLongPosition","pairData","askPrice","setAskPrice","showModal","setShowModal","_useMutation","useMutation","variables","pair","lotSize","openedAt","position","update","cache","user","readQuery","query","me","bankroll","writeQuery","data","refetchQueries","_useMutation2","openPosition","_useMutation2$","loading","error","message","Fragment","onClick","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","currencyPairInfo","alert","stop","className","toLocaleString","react_router_dom","to","pathname","state","OpenShortPosition","bidPrice","setBidPrice","Landing","_useState","useState","_useState2","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","useQuery","_useQuery","refetch","pairs_SelectList","positions_OpenLongPosition","positions_OpenShortPosition","keys","map","val","key","LOGOUT_MUTATION","logout_templateObject","withRouter","props","history","push","logout","Navbar","react_router","exact","auth_Logout","REGISTERMUTATION","register_templateObject","Register","email","setEmail","password","setPassword","name","setName","register","onSubmit","preventDefault","_x","apply","this","arguments","required","type","placeholder","LOGINMUTATION","login_templateObject","Login","login","reset","_ref2","ADDFUNDS","addFunds_templateObject","AddFunds","amount","addFunds","Pairs","open","getPairs","id","toFixed","createdAt","Date","updatedAt","closedAt","pipDif","profitLoss","NewPosition","style","textAlign","Account","setOpen","location","pairs_Pairs","CLOSEPOSITION","closePosition_templateObject","ClosePosition","closePosition","PairDetails","lastRefreshed","pipDifLong","pipDifShort","potentialProfitLoss","Pair","_props$location$state","_props$location$state2","_pair$split","_pair$split2","_data$currencyPairInf","date","pairs_PairDetails","MONTHLYTIMESERIES","monthlyTimeSeries_templateObject","Chart","setFromCurrency","setToCurrency","window","href","labels","monthlyTimeSeries","timesArray","chartData","valuesArray","toUpperCase","es","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","App","path","component","render","components_navbar_Navbar","InMemoryCache","client","ApolloClient","link","HttpLink","uri","credentials","ReactDOM","react_common_esm","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.98d0a410.chunk.js","sourcesContent":["import gql from 'graphql-tag'\n\nexport const MEQUERY = gql`\n  query MeQuery {\n    me {\n      id\n      email \n      name\n      bankroll\n    }\n  }\n`","import gql from 'graphql-tag'\n\nexport const CURRENCY_PAIR_INFO = gql`\n  query CurrencyPairInfo($fc: String, $tc: String) {\n    currencyPairInfo(tc: $tc, fc: $fc) {\n      fromCurrency \n      fromCurrencyName\n      toCurrency\n      toCurrencyName\n      exchangeRate\n      lastRefreshed\n      timeZone\n      bidPrice\n      askPrice\n    }\n  }\n`","import React from 'react'\n\nconst SelectList = ({ fc, setFc, tc, setTc }) => (\n  <select\n    value={`${fc}/${tc}`}\n    onChange={e => {\n      const [fromCurrency, toCurrency] = e.target.value.split('/')\n      setFc(fromCurrency)\n      setTc(toCurrency)\n    }}>\n    <option>EUR/USD</option>\n    <option>JPY/USD</option>\n    <option>GBP/USD</option>\n    <option>AUD/USD</option>\n    <option>USD/CHF</option>\n    <option>NZD/USD</option>\n    <option>USD/CAD</option>\n  </select>\n)\n\nexport default SelectList","import gql from 'graphql-tag'\n\nexport const OPENPOSITION = gql`\n    mutation OpenPosition($pair: String!, $lotSize: Int!, $openedAt: Float!, $position: String!) {\n        openPosition(pair: $pair, lotSize: $lotSize, openedAt: $openedAt, position: $position) {\n            success\n            message\n            pair {\n                id\n                user\n                position\n                pair\n                lotSize\n                openedAt\n            }\n        }\n    }\n`","import gql from 'graphql-tag'\n\nexport const GETPAIRS = gql`\n  query GetPairs {\n    getPairs {\n      id\n      user\n      pair\n      lotSize\n      openedAt\n      closedAt\n      pipDif\n      profitLoss\n      open\n      position\n      createdAt\n      updatedAt\n    }\n  }\n`","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { useMutation } from '@apollo/react-hooks'\n\nimport { OPENPOSITION } from '../../graphql/mutations/openPosition'\nimport { MEQUERY } from '../../graphql/queries/me'\nimport { GETPAIRS } from '../../graphql/queries/getPairs'\n\nconst OpenLongPosition = ({\n  fc, \n  tc, \n  pairData,\n  askPrice,\n  setAskPrice,\n  showModal,\n  setShowModal\n}) => {\n\n  const [ openPosition, { data, loading, error }] = useMutation(OPENPOSITION, {\n    variables: {\n      pair: `${fc}/${tc}`,\n      lotSize: 100000,\n      openedAt: askPrice,\n      position: 'long'\n    },\n    update: cache => {\n      const user = cache.readQuery({ query: MEQUERY })\n      user.me.bankroll -= 100000\n      cache.writeQuery({\n        query: MEQUERY,\n        data: { me: user.me }\n      })\n    },\n    refetchQueries: [{ query: GETPAIRS }]\n  })\n\n  if(loading) return <p>Loading...</p>\n  if(error) return <p>{ error.message }</p>\n  return openPosition && (\n    <>\n      <button onClick={ async () => {\n        await setAskPrice(+pairData.currencyPairInfo.askPrice)\n        alert('Are you sure you want to buy?')\n        await openPosition()\n        setShowModal(true)\n      }}>\n        Buy\n      </button>\n      { data && data.openPosition.message && showModal && (\n        <div className='modal'>\n          <button onClick={() => setShowModal(false)}>x</button>\n          <p>{ data.openPosition.message }</p>\n          <p>Currency Pair: { data.openPosition.pair.pair }</p>\n          <p>Lot Size: { data.openPosition.pair.lotSize.toLocaleString() }.00</p>\n          <p>Opened At: { data.openPosition.pair.openedAt }</p>\n          <p>Position: { data.openPosition.pair.position }</p>\n          <Link to={{ pathname: '/account', state: { data } }}>\n            <button>Details</button>\n          </Link>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default OpenLongPosition","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { useMutation } from '@apollo/react-hooks'\n\nimport { OPENPOSITION } from '../../graphql/mutations/openPosition'\nimport { MEQUERY } from '../../graphql/queries/me'\nimport { GETPAIRS } from '../../graphql/queries/getPairs'\n\nconst OpenShortPosition = ({\n  fc,\n  tc,\n  pairData,\n  bidPrice,\n  setBidPrice,\n  showModal,\n  setShowModal\n}) => {\n  const [ openPosition, { data, loading, error }] = useMutation(OPENPOSITION, {\n    variables: {\n      pair: `${fc}/${tc}`, \n      lotSize: 100000, \n      openedAt: bidPrice, \n      position: 'short' \n    },\n    update: cache => {\n      const user = cache.readQuery({ query: MEQUERY })\n      user.me.bankroll -= 100000\n      cache.writeQuery({\n        query: MEQUERY,\n        data: { me: user.me }\n      })\n    },\n    refetchQueries: [{ query: GETPAIRS }]\n  })\n\n  if(loading) return <p>Loading...</p>\n  if(error) return <p>{ error.message }</p>\n  return openPosition && (\n    <>\n      <button onClick={ async () => {\n        await setBidPrice(+pairData.currencyPairInfo.bidPrice)\n        alert('Are you sure you want to sell short?')\n        await openPosition()\n        setShowModal(true) \n      }}>\n        Sell\n      </button> \n      { data && data.openPosition.message && showModal && ( \n        <div className='modal'>\n          <button onClick={() => setShowModal(false)}>x</button>\n          <p>{ data && data.openPosition.message }</p>\n          <p>Currency Pair: { data.openPosition.pair.pair }</p>\n          <p>Lot Size: { data.openPosition.pair.lotSize.toLocaleString() }.00</p>\n          <p>Opened At: { data.openPosition.pair.openedAt }</p>\n          <p>Position: { data.openPosition.pair.position }</p>\n          <Link to={{ pathname: '/account', state: { data } }}>\n            <button>Details</button>\n          </Link>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default OpenShortPosition","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport { MEQUERY } from '../graphql/queries/me'\nimport { CURRENCY_PAIR_INFO } from '../graphql/queries/currencyPairInfo'\nimport SelectList from '../components/pairs/SelectList'\nimport OpenLongPosition from '../components/positions/OpenLongPosition'\nimport OpenShortPosition from '../components/positions/OpenShortPosition'\n\nconst Landing = () => {\n  const [fc, setFc] = useState('EUR'),\n        [tc, setTc] = useState('USD'),\n        [askPrice, setAskPrice] = useState(0),\n        [bidPrice, setBidPrice] = useState(0),\n        [showModal, setShowModal] = useState(false),\n        user = useQuery(MEQUERY),\n        { data, loading, error, refetch } = useQuery(CURRENCY_PAIR_INFO, {\n          variables: { fc, tc }\n        })\n\n  if(loading) return <p>Loading...</p>\n  if(error) return <button onClick={() => refetch()}>Retry</button>\n  \n  return data && (\n    <section>\n      <h2>Currency Exchange</h2>\n      { user.data.me && <p>Available Balance { user.data.me.bankroll.toLocaleString()}.00</p> }\n      <div>\n        <SelectList fc={fc} tc={tc} setFc={setFc} setTc={setTc} />\n        <button onClick={() => refetch()}>Refresh</button>\n        { user.data.me && (\n          <OpenLongPosition\n            fc={fc}\n            tc={tc}\n            pairData={data}\n            askPrice={askPrice}\n            setAskPrice={setAskPrice}\n            showModal={showModal}\n            setShowModal={setShowModal}\n        />)}\n        { user.data.me && (\n          <OpenShortPosition\n            fc={fc}\n            tc={tc}\n            pairData={data}\n            bidPrice={bidPrice}\n            setBidPrice={setBidPrice}\n            showModal={showModal}\n            setShowModal={setShowModal}\n        />)}\n      </div>\n      <div className='landing_pair_data'>\n        { data.currencyPairInfo && Object.keys(data.currencyPairInfo).map(val => (\n          <div key={val} className='data'>\n            <p><span>{val}: </span>{ data.currencyPairInfo[val] }</p>\n          </div>\n        ))}\n      </div>\n    </section>\n  )\n}\n\nexport default Landing","import gql from 'graphql-tag'\n\nexport const LOGOUT_MUTATION = gql`\n  mutation Logout {\n    logout\n  }\n`","import React from 'react' \nimport { useMutation } from '@apollo/react-hooks'\nimport { withRouter } from 'react-router-dom'\n\nimport { MEQUERY } from '../../graphql/queries/me'\nimport { LOGOUT_MUTATION } from '../../graphql/mutations/logout'\n\nconst Logout = props => {\n  const [logout] = useMutation(LOGOUT_MUTATION, {\n    update: cache => {\n      cache.writeQuery({\n        query: MEQUERY,\n        data: { me: null }\n      })\n      props.history.push('/')\n    }\n  })\n  \n  return <div onClick={() => logout()}>Logout</div>\n}\n\nexport default withRouter(Logout)","import React from 'react'\nimport { NavLink, Redirect } from 'react-router-dom'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport { MEQUERY } from '../../graphql/queries/me'\nimport Logout from '../auth/Logout'\nimport './Navbar.css'\n\nconst Navbar = () => {\n  const { data, loading, error } = useQuery(MEQUERY)\n  \n  if(loading) return <p>Loading....</p>\n  if(error) return <Redirect to='/login' />\n  if(!data) return <p>This is unfortunate</p>\n\n  return (\n    <div className='navigation'>\n      <header><NavLink exact to='/'>Forex</NavLink></header>\n      { !data.me ? (\n        <ul>\n          <li><NavLink exact to='/login'>Login</NavLink></li>\n          <li><NavLink exact to='/register'>SignUp</NavLink></li>\n        </ul> ) \n      : (\n        <ul>\n          <li><NavLink to='/chart'>Chart</NavLink></li>\n          <li><NavLink to='/account'>Account</NavLink></li>\n          <li><Logout /></li>\n        </ul>\n      )}\n    </div>\n  )\n}\n\nexport default Navbar","import gql from 'graphql-tag'\n\nexport const REGISTERMUTATION = gql`\n    mutation RegisterMutation($email: String!, $password: String!, $name: String!) {\n        register(email: $email, password: $password, name: $name)  \n    }\n`","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/react-hooks'\n\nimport { REGISTERMUTATION } from '../../graphql/mutations/register'\n\nexport default function Register(props) {\n  const [email, setEmail] = useState(''),\n        [password, setPassword] = useState(''),\n        [name, setName] = useState(''),\n        [register, { error }] = useMutation(REGISTERMUTATION, {\n          variables: { email, password, name }\n        })\n\n  return (\n    <div className='register'>\n      <form onSubmit={ async e => {\n        e.preventDefault()\n        await register()\n        props.history.push('/login')\n      }}>\n        <h2>Sign Up</h2>\n        <input\n          required\n          name='email'\n          type='email'\n          value={email}\n          onChange={e => setEmail(e.target.value)}\n          placeholder='Enter your email'\n        />\n        <input\n          required\n          type='password'\n          value={password}\n          onChange={e => setPassword(e.target.value)}\n          placeholder='Enter your password'\n        />\n        <input\n          required\n          type='text'\n          value={name}\n          onChange={e => setName(e.target.value)}\n          placeholder='Enter your name'\n        />\n        { error && <p>{ error.message }</p> }\n        <button>SignUp</button>\n      </form>\n    </div>\n  )\n}","import gql from 'graphql-tag'\n\nexport const LOGINMUTATION = gql`\n  mutation LoginMutation($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      id\n      email\n      name\n    }\n  }\n`","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/react-hooks'\n\nimport { MEQUERY } from '../../graphql/queries/me'\nimport { LOGINMUTATION } from '../../graphql/mutations/login'\n\nexport default function Login(props) {\n  const [email, setEmail] = useState(''),\n        [password, setPassword] = useState(''),\n        [login, { error }] = useMutation(LOGINMUTATION, {\n          variables: { email, password },\n          update: (cache, { data }) => {\n            if(!data || !data.login) return \n            cache.reset()\n            cache.writeQuery({\n              query: MEQUERY,\n              data: { me: data.login }\n            })\n          }\n        })\n\n  return (\n    <div className='login'>\n      <form onSubmit={ async e => {\n        e.preventDefault()\n        await login()\n        props.history.push('/') \n      }}>\n        <h2>Login</h2>\n        <input\n          required\n          name='email'\n          type='email'\n          value={ email }\n          onChange={ e => setEmail(e.target.value) }\n          placeholder='Enter your email'\n        />\n        <input\n          required\n          type='password'\n          value={ password }\n          onChange={ e => setPassword(e.target.value) }\n          placeholder='Enter your password'\n        />\n        { error && <p>{ error.message }</p> }\n        <button type='submit'>Login</button>\n      </form>\n    </div>\n  )\n}","import gql from 'graphql-tag'\n\nexport const ADDFUNDS = gql`\n  mutation ($amount: Int!) {\n    addFunds(amount: $amount) {\n      success\n      message\n      user {\n        id\n        name\n        email\n        bankroll\n      }\n    }\n  }\n`","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/react-hooks'\n\nimport { ADDFUNDS } from '../../graphql/mutations/addFunds'\n\nexport default function AddFunds() {\n  const [showModal, setShowModal] = useState(false),\n        [addFunds, { data, loading, error }] = useMutation(ADDFUNDS, {\n          variables: { amount: 1000000 }\n        })\n\n  if(loading) return <p>Loading...</p>\n  if(error) return <p>{ error.message }</p>\n\n  return addFunds && (\n    <>\n      <button onClick={ async () => {\n        alert('Are you sure?')\n        await addFunds()\n        setShowModal(true) \n      }}>Add Funds</button>\n      { data && data.addFunds.message && showModal && ( \n        <div className='modal'>\n          <button onClick={() => setShowModal(false)}>x</button>\n          <p>{ data.addFunds.message }</p>\n        </div>\n      )}\n    </>\n  )\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Pairs = ({ data, open, user }) => (\n  <div>\n    { data.getPairs && data.getPairs.map(pair => pair.open && open && (\n      <div className='pair_divs' key={ pair.id }>\n        <Link to={{ pathname: '/pair', state: { pair, me: user.data.me } }}>\n          { pair.pair && <p><span>Currency Pair: </span>{ pair.pair }</p> }\n          { pair.lotSize && <p><span>Lot Size: </span>{ pair.lotSize.toLocaleString() }.00</p> }\n          { pair.position && <p><span>Position: </span>{ pair.position }</p> }\n          { pair.openedAt && <p><span>Opened At: </span>{ pair.openedAt.toFixed(4) }</p> }\n          { pair.createdAt && <p><span>Created At: </span>{ new Date(+pair.createdAt).toLocaleString() }</p> }\n          { pair.updatedAt && <p><span>Updated At: </span>{ new Date(+pair.updatedAt).toLocaleString() }</p> }\n        </Link>\n      </div>\n    ))}\n    { data.getPairs && data.getPairs.map(pair => !pair.open && !open && (\n      <div className='pair_divs' key={ pair.id }>\n        <div>\n          { pair.pair && <p><span>Currency Pair: </span>{ pair.pair }</p> }\n          { pair.lotSize && <p><span>Lot Size: </span>{ pair.lotSize.toLocaleString() }.00</p> }\n          { pair.position && <p><span>Position: </span>{ pair.position }</p> }\n          { pair.openedAt && <p><span>Opened At: </span>{ pair.openedAt.toFixed(4) }</p> }\n          { pair.closedAt && <p><span>Closed At: </span>{ pair.closedAt.toFixed(4) }</p> }\n          { <p><span>Pip Dif: </span>{ pair.pipDif || 0 }</p> }\n          { <p><span>Profit/Loss: </span>{ pair.profitLoss.toFixed(2) || 0 }</p> }\n          { pair.createdAt && <p><span>Created At: </span>{ new Date(+pair.createdAt).toLocaleString() }</p> }\n          { pair.updatedAt && <p><span>Updated At: </span>{ new Date(+pair.updatedAt).toLocaleString() }</p> }\n        </div>\n      </div>\n    ))}\n  </div>\n)\n\nexport default Pairs\n","import React from 'react'\n\nexport default function NewPosition({ state }) {\n  return (\n    <div>\n      <h3>New Position</h3>\n      <div className='pair_divs' style={{ textAlign: 'center' }}>\n        <p><span>Pair: </span>{ state.data.openPosition.pair.pair }</p>\n        <p><span>Lot Size: </span>{ state.data.openPosition.pair.lotSize.toLocaleString() }.00</p>\n        <p><span>Pip Dif: </span>{ state.data.openPosition.pair.openedAt }</p>\n        <p><span>Position: </span>{ state.data.openPosition.pair.position }</p>\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { Redirect } from 'react-router-dom'\n\nimport { GETPAIRS } from '../graphql/queries/getPairs'\nimport { MEQUERY } from '../graphql/queries/me'\nimport AddFunds from '../components/pairs/AddFunds'\nimport Pairs from '../components/pairs/Pairs'\nimport NewPosition from '../components/pairs/NewPosition'\n\nexport default function Account(props) {\n  const [open, setOpen] = useState(true),\n        user = useQuery(MEQUERY),\n        { data, loading, error } = useQuery(GETPAIRS)\n\n  if(user.error) return <Redirect to='/login' />\n  if(!user.data || !user.data.me) return <p>A man has no name</p>\n  if(loading) return <p>Loading...</p>\n  if(!data) return (\n    <section>\n      <h2>{ user.data.me.name }</h2>\n      <div>\n        <p><span>Available Balance: </span>{ user.data.me.bankroll.toLocaleString() }.00</p>\n        <AddFunds />\n      </div>\n    </section>\n  )\n  if(error) return <p>{ error.message }</p>\n  \n  return (\n    <section>\n      <h2>{ user.data.me.name }</h2>\n      <div>\n        <p><span>Available Balance: </span>{ user.data.me.bankroll.toLocaleString() }.00</p>\n        <AddFunds />\n      </div>\n      { props.location.state && <NewPosition state={ props.location.state } /> }\n      <h3>Currency Pairs</h3>\n      <button onClick={() => setOpen(true)}>open</button>\n      <button onClick={() => setOpen(false)}>closed</button>\n      <Pairs data={ data } open={ open } user={ user } />\n    </section>\n  )\n}","import gql from 'graphql-tag'\n\nexport const CLOSEPOSITION = gql`\n  mutation ClosePosition($id: ID!, $closedAt: Float!) {\n    closePosition(id: $id, closedAt: $closedAt) {\n      success\n      message\n      pair {\n        id\n        user\n        pair\n        lotSize\n        position\n        openedAt\n        closedAt\n        pipDif\n        profitLoss\n        open\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`","import React, { useState } from 'react'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport { Link } from 'react-router-dom'\n\nimport { CLOSEPOSITION } from '../../graphql/mutations/closePosition'\nimport { MEQUERY } from '../../graphql/queries/me'\nimport { GETPAIRS } from '../../graphql/queries/getPairs'\n\nexport default function ClosePosition({ id, bidPrice, askPrice, position }) {\n  const [showModal, setShowModal] = useState(false),\n        { refetch  } = useQuery(MEQUERY),\n        [ closePosition, { data, loading, error }] = useMutation(CLOSEPOSITION, {\n          variables: position === 'long'\n            ? { id, closedAt: +bidPrice } \n            : { id, closedAt: +askPrice },\n          refetchQueries: [{ query: GETPAIRS }]\n        })\n\n  if(loading) return <p>Loading...</p>\n  if(error) return <p>{ error.message }</p>\n  return closePosition && (\n    <>\n      <button onClick={ async () => {\n        alert(`Are you sure you want to close your ${\n          position === 'long' ? 'long' : 'short' } position?`) \n        await closePosition()\n        setShowModal(true)\n        refetch()\n      }}>\n        { position === 'long' ? 'Sell' : 'Buy' }\n      </button> \n      \n      { data && data.closePosition.message && showModal && ( \n        <div className='modal'>\n          <button onClick={() => setShowModal(false)}>x</button>\n          <p>{ data.closePosition.message }</p>\n          <Link to='/account'><button>Account</button></Link>\n        </div>\n      )}\n    </>\n  )\n}","import React from 'react'\n\nconst PairDetails = ({\n  pair,\n  lotSize,\n  openedAt,\n  position,\n  createdAt,\n  askPrice,\n  bidPrice,\n  lastRefreshed,\n  pipDifLong,\n  pipDifShort,\n  potentialProfitLoss\n}) => (\n  <div>\n    <p><span>Currency Pair: </span>{pair}</p>\n    <p><span>Lot Size: </span>{lotSize.toLocaleString()}.00</p>\n    <p><span>Opened At: </span>{(+openedAt).toFixed(4)}</p>\n    <p><span>Position: </span>{position}</p>\n    <p><span>Created At: </span>{new Date(+createdAt).toLocaleString()}</p>\n    { position === 'long' \n      ? (\n        <>\n          <br />\n          <p><span>Current Bid Price: </span>{(+bidPrice).toFixed(4)}</p>\n          <p><span>Last Refreshed: </span>{lastRefreshed}</p>\n          <p><span>Current Pip Difference: </span>{pipDifLong}</p>\n          <p><span>Potential PL: </span>\n            {potentialProfitLoss.toLocaleString()}.00\n          </p>\n        </> ) \n      : (\n        <>\n          <br />\n          <p><span>Current Ask Price: </span>{(+askPrice).toFixed(4)}</p>\n          <p><span>Last Refreshed: </span>{lastRefreshed}</p>\n          <p><span>Current Pip Difference: </span>{pipDifShort}</p>\n          <p><span>Potential PL: </span>\n            {potentialProfitLoss.toLocaleString()}.00\n          </p>\n        </>\n      )\n    }\n  </div>\n)\n\nexport default PairDetails","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport { CURRENCY_PAIR_INFO } from '../graphql/queries/currencyPairInfo'\nimport ClosePosition from '../components/positions/ClosePosition'\nimport PairDetails from '../components/pairs/PairDetails'\n\nexport default function Pair(props) {\n  const { createdAt, lotSize, openedAt, pair, position, id } = props.location.state.pair,\n        { bankroll, name } = props.location.state.me,\n        [ fc, tc ] = pair.split('/'),\n        { data, loading, error, refetch } = useQuery(CURRENCY_PAIR_INFO, {\n          variables: { fc, tc }\n        })\n\n  if(loading) return <p>Loading...</p>\n  if(error) return <p>{ error.message }</p>\n  \n  const { bidPrice, lastRefreshed, askPrice } = data.currencyPairInfo,\n        pipDifLong = (bidPrice - openedAt).toFixed(4),\n        pipDifShort = (openedAt - askPrice).toFixed(4),\n        potentialProfitLoss = position === 'long'\n          ? pipDifLong * lotSize\n          : pipDifShort * lotSize,\n        date = new Date(lastRefreshed + ' UTC')\n  \n  return data && (\n    <section>\n      <div className='landing_pair_data'>\n        <h3>Pair Details</h3>\n        <div>\n          <p>{ name } your available balance is { bankroll.toLocaleString() }.00</p> \n          <div>\n            <button onClick={() => refetch()}>Refresh</button>\n            <ClosePosition \n              id={id} \n              bidPrice={bidPrice} \n              askPrice={askPrice} \n              position={position} \n            />\n          </div>\n        </div>\n        <PairDetails\n          pair={pair} \n          lotSize={lotSize}\n          openedAt={openedAt}\n          position={position}\n          createdAt={createdAt}\n          askPrice={askPrice}\n          bidPrice={bidPrice}\n          lastRefreshed={date.toLocaleString()}\n          pipDifLong={pipDifLong}\n          pipDifShort={pipDifShort}\n          potentialProfitLoss={potentialProfitLoss}\n        />\n      </div>\n    </section>\n  )\n}","import gql from 'graphql-tag' \n\nexport const MONTHLYTIMESERIES = gql`\n  query MonthlyTimeSeries($fc: String, $tc: String) {\n    monthlyTimeSeries(fc: $fc, tc: $tc) {\n      timesArray\n      valuesArray\n    }\n  }\n`","import React, { useState } from 'react'\nimport { Line } from 'react-chartjs-2'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport { MONTHLYTIMESERIES } from '../graphql/queries/monthlyTimeSeries'\n\nexport default function Chart() {\n  const [fc, setFc] = useState('EUR'),\n        [tc, setTc] = useState('USD'), \n        [fromCurrency, setFromCurrency] = useState('EUR'), \n        [toCurrency, setToCurrency] = useState('USD'),\n        { data, error, loading, refetch } = useQuery(MONTHLYTIMESERIES, {\n          variables: { fc, tc }\n        })\n\n  if(loading) return <p>loading...</p>\n  if(error) return <button onClick={() => {\n    refetch({ fc: 'EUR', tc: 'USD' })\n    window.location.href = '/chart'\n  }}>retry</button>\n  \n  const labels = data && data.monthlyTimeSeries.timesArray,\n        chartData = data && data.monthlyTimeSeries.valuesArray\n  \n\n  return (\n    <section className='chartData'>\n      <form onSubmit={e => {\n        e.preventDefault()\n        setFc(fromCurrency)\n        setTc(toCurrency) \n      }}>\n        <input \n          name='fromCurrency'\n          value={fromCurrency}\n          placeholder='From Currency'\n          onChange={e => setFromCurrency(e.target.value.toUpperCase())}\n        />\n        <input \n          name='toCurrency'\n          value={toCurrency}\n          placeholder='To Currency'\n          onChange={e => setToCurrency(e.target.value.toUpperCase())}\n        />\n        <button>submit</button>\n      </form>\n      <Line data={{\n        labels,\n        datasets: [\n          {\n            label: `${fc}/${tc} Time Series FX (Monthly)`,\n            fill: true,\n            lineTension: 0.1,\n            backgroundColor: 'rgb(55, 131, 194)',\n            borderColor: 'white',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'white',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'white',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: chartData\n          }\n        ]\n      }} />\n    </section>\n  )\n}","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport Landing from './pages/Landing'\nimport Navbar from './components/navbar/Navbar'\nimport Register from './components/auth/Register'\nimport Login from './components/auth/Login'\nimport Account from './pages/Account'\nimport Pair from './pages/Pair'\nimport Chart from './pages/Chart'\n\nconst App = () => (\n  <Switch>\n    <Route path='/login' component={Login} />\n    <Route path='/' render={() => (\n      <>\n        <div className='navbar'><Navbar /></div>\n        <Route exact path='/' component={Landing} />\n        <Route path='/register' component={Register} />\n        <Route path='/account' component={Account} />\n        <Route path='/pair' component={Pair} />\n        <Route path='/chart' component={Chart} />\n      </>\n    )} />\n  </Switch>\n)\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport { ApolloClient } from 'apollo-client'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { InMemoryCache } from 'apollo-cache-inmemory' \nimport { HttpLink } from 'apollo-link-http'\n\nimport App from './App'\nimport './index.css'\n\nconst cache = new InMemoryCache() \nconst client = new ApolloClient({\n    cache,\n    link: new HttpLink({\n        uri: '/graphql',\n        credentials: 'include' \n    })\n})\n\nReactDOM.render(\n    <BrowserRouter>\n        <ApolloProvider client={client}>\n            <App />\n        </ApolloProvider>\n    </BrowserRouter>, document.getElementById('root')\n)"],"sourceRoot":""}